#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1206401848.847908
__CHEETAH_genTimestamp__ = 'Tue Mar 25 09:37:28 2008'
__CHEETAH_src__ = 'aanroFoxmlTemplate.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Mar 18 16:58:17 2008'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class aanroFoxmlTemplate(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<?xml version="1.0" encoding="UTF-8"?>
<foxml:digitalObject xmlns:foxml="info:fedora/fedora-system:def/foxml#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" PID="''')
        _v = VFFSL(SL,"pid",True) # '$pid' on line 2, col 132
        if _v is not None: write(_filter(_v, rawExpr='$pid')) # from line 2, col 132.
        write('''" 
xsi:schemaLocation="http://www.fedora.info/definitions/1/0/foxml1-0.xsd">
  <foxml:objectProperties>
    <foxml:property NAME="http://www.w3.org/1999/02/22-rdf-syntax-ns#type" VALUE="FedoraObject"></foxml:property>
    <foxml:property NAME="info:fedora/fedora-system:def/model#state" VALUE="A"></foxml:property>
    <foxml:property NAME="info:fedora/fedora-system:def/model#label" VALUE="''')
        _v = VFFSL(SL,"title",True) # '$title' on line 7, col 77
        if _v is not None: write(_filter(_v, rawExpr='$title')) # from line 7, col 77.
        write('''"></foxml:property>
    <foxml:property NAME="info:fedora/fedora-system:def/model#contentModel" VALUE="Fez"></foxml:property>
  </foxml:objectProperties>
  <foxml:datastream CONTROL_GROUP="X" ID="DC" STATE="A">
    <foxml:datastreamVersion ID="DC.0" LABEL="Dublin Core" MIMETYPE="text/xml">
      <foxml:xmlContent>
<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
                        xmlns:dc="http://purl.org/dc/elements/1.1/">
                        

<dc:type>''')
        _v = VFFSL(SL,"doctype",True) # '$doctype' on line 17, col 10
        if _v is not None: write(_filter(_v, rawExpr='$doctype')) # from line 17, col 10.
        write('''</dc:type>
<dc:date>''')
        _v = VFFSL(SL,"pubyear",True) # '$pubyear' on line 18, col 10
        if _v is not None: write(_filter(_v, rawExpr='$pubyear')) # from line 18, col 10.
        write('''</dc:date>
<dc:title>''')
        _v = VFFSL(SL,"title",True) # '$title' on line 19, col 11
        if _v is not None: write(_filter(_v, rawExpr='$title')) # from line 19, col 11.
        write('''</dc:title>
  
''')
        for author in VFFSL(SL,"authors",True): # generated from line 21, col 1
            #  Note: remove the affiliation in brackets from the author entry in AANRO so that only the personal name goes in to dc:creator. Affiliation information will not appear in DC -->
            write('''<dc:creator>''')
            _v = VFFSL(SL,"author",True)['name'] # "$author['name']" on line 23, col 13
            if _v is not None: write(_filter(_v, rawExpr="$author['name']")) # from line 23, col 13.
            write('''</dc:creator>
''')
        write('''<dc:description>''')
        _v = VFFSL(SL,"abstract",True) # '$abstract' on line 25, col 17
        if _v is not None: write(_filter(_v, rawExpr='$abstract')) # from line 25, col 17.
        write('''</dc:description>

''')
        for subject in VFFSL(SL,"subjects",True): # generated from line 27, col 1
            write('''<dc:subject>''')
            _v = VFFSL(SL,"subject",True) # '$subject' on line 28, col 13
            if _v is not None: write(_filter(_v, rawExpr='$subject')) # from line 28, col 13.
            write('''</dc:subject>
''')
        write('''</oai_dc:dc>
      </foxml:xmlContent>
      
    </foxml:datastreamVersion>
  </foxml:datastream>
  <foxml:datastream CONTROL_GROUP="X" ID="MODS" STATE="A">
    <foxml:datastreamVersion ID="MODS.0" LABEL="MODSXML Record" MIMETYPE="text/xml">
      <foxml:xmlContent>
      
''')
        #  Don't throw out modsCollection without checking http://www.loc.gov/standards/mods/v3/MARC21slim2MODS.xsl -->
        write('''<modsCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.loc.gov/mods/v3" xsi:schemaLocation="http://www.loc.gov/mods/v3 http://www.loc.gov/standards/mods/v3/mods-3-2.xsd">
  <mods version="3.2">  
''')
        #  Change: &lt;nonSort is for "The" "An" "A" when these words appear at beginning of title -->
        write('''    <titleInfo>
    \t  <nonSort></nonSort>
\t      <title>''')
        _v = VFFSL(SL,"title",True) # '$title' on line 45, col 15
        if _v is not None: write(_filter(_v, rawExpr='$title')) # from line 45, col 15.
        write('''</title>
    </titleInfo>
''')
        for author in VFFSL(SL,"authors",True): # generated from line 47, col 5
            #  Change: Enter author as it appears in the AANRO cell -- family name, initials.
            write('''    <name type="personal">
            <namePart >''')
            _v = VFFSL(SL,"author",True) # '$author' on line 50, col 24
            if _v is not None: write(_filter(_v, rawExpr='$author')) # from line 50, col 24.
            write('''</namePart>
            <affiliation>''')
            _v = VFFSL(SL,"author",True)["affiliation"] # '$author["affiliation"]' on line 51, col 26
            if _v is not None: write(_filter(_v, rawExpr='$author["affiliation"]')) # from line 51, col 26.
            write('''</affiliation>
            <role>
                <roleTerm authority="marcrelator" type="text">creator</roleTerm>
            </role>
    </name>
''')
        write('''    <typeOfResource>text</typeOfResource>
    <genre authority="AANRO">''')
        _v = VFFSL(SL,"doctype",True) # '$doctype' on line 58, col 30
        if _v is not None: write(_filter(_v, rawExpr='$doctype')) # from line 58, col 30.
        write('''</genre>
    <originInfo>
      <dateIssued>''')
        _v = VFFSL(SL,"pubyear",True) # '$pubyear' on line 60, col 19
        if _v is not None: write(_filter(_v, rawExpr='$pubyear')) # from line 60, col 19.
        write('''</dateIssued>
    </originInfo>    
    
''')
        # Where an AANRO abstract entry ends with (A), delete (A) and move the full stop to the end of the last word. -->
        write('''    <abstract>''')
        _v = VFFSL(SL,"abstract",True) # '$abstract' on line 64, col 15
        if _v is not None: write(_filter(_v, rawExpr='$abstract')) # from line 64, col 15.
        write('''</abstract>
    
''')
        # No notes were included in the testpublications  
        write('''    <note>''')
        _v = VFFSL(SL,"notes",True) # '$notes' on line 67, col 11
        if _v is not None: write(_filter(_v, rawExpr='$notes')) # from line 67, col 11.
        write('''</note>
    
''')
        for subject in VFFSL(SL,"subjects",True): # generated from line 69, col 5
            write('''     <subject>
            <topic>''')
            _v = VFFSL(SL,"subject",True) # '$subject' on line 71, col 20
            if _v is not None: write(_filter(_v, rawExpr='$subject')) # from line 71, col 20.
            write('''</topic>
    </subject>
''')
        write('''    
''')
        # AANRO's locality to go to subject - geographic as follows
        write('''    <subject>
\t\t<geographic>''')
        _v = VFFSL(SL,"locality",True) # '$locality' on line 77, col 15
        if _v is not None: write(_filter(_v, rawExpr='$locality')) # from line 77, col 15.
        write('''</geographic>
\t</subject>
    
''')
        # Change: Have removed <physicalDescription> above. In related item enter the complete text of AANRO's $source
        write('''
   <relatedItem type="host">
\t\t<note type="citation">''')
        _v = VFFSL(SL,"source",True) # '$source' on line 83, col 25
        if _v is not None: write(_filter(_v, rawExpr='$source')) # from line 83, col 25.
        write('''</note>\t
\t\t<identifier type="isbn">''')
        _v = VFFSL(SL,"isbn",True) # '$isbn' on line 84, col 27
        if _v is not None: write(_filter(_v, rawExpr='$isbn')) # from line 84, col 27.
        write('''</identifier>
        <identifier type="issn">''')
        _v = VFFSL(SL,"issn",True) # '$issn' on line 85, col 33
        if _v is not None: write(_filter(_v, rawExpr='$issn')) # from line 85, col 33.
        write('''</identifier>
    </relatedItem>
    
''')
        for sponsor in VFFSL(SL,"sponsors",True): # generated from line 88, col 5
            write('''
\t<name type="corporate">
            <namePart>''')
            _v = VFFSL(SL,"sponsor",True) # '$sponsor' on line 91, col 23
            if _v is not None: write(_filter(_v, rawExpr='$sponsor')) # from line 91, col 23.
            write('''</namePart>
            <role>
                <roleTerm authority="marcrelator" >Sponsor</roleTerm>
            </role>
    </name>

''')
        write('''    
''')
        #  NOTE: Not included in this template is the AANRO $source data. The $source info is already included as part of the <relatedItem><note type="citation">$source</note> information. The $source info (which in MODS is either an isbn or issn identifier) will often refer to the relatedItem. But sometimes it may refer to the main entry titleInfo. Need further advice from AANRO if they want the issn or isbn data separated out with its own MODS property.
        write('''\t
    <location>
\t\t<url displayLabel="Delivery Link:">''')
        _v = VFFSL(SL,"deliverylink",True) # '$deliverylink' on line 102, col 38
        if _v is not None: write(_filter(_v, rawExpr='$deliverylink')) # from line 102, col 38.
        write('''</url>
\t</location>
\t<location>
\t\t<url displayLabel="Delivery Email:">''')
        _v = VFFSL(SL,"deliveryemail",True) # '$deliveryemail' on line 105, col 39
        if _v is not None: write(_filter(_v, rawExpr='$deliveryemail')) # from line 105, col 39.
        write('''</url>
\t</location>
\t
\t<accessCondition type="restrictionOnAccess">''')
        _v = VFFSL(SL,"deliverynote",True) # '$deliverynote' on line 108, col 46
        if _v is not None: write(_filter(_v, rawExpr='$deliverynote')) # from line 108, col 46.
        write('''</accessCondition>
\t
''')
        # Need to decide the appropriate displayLabel for here 
        write('''
    <location>
      <url>''')
        _v = VFFSL(SL,"weblink",True) # '$weblink' on line 113, col 12
        if _v is not None: write(_filter(_v, rawExpr='$weblink')) # from line 113, col 12.
        write('''</url>
    </location>
   
  </mods>
</modsCollection>
   
    </foxml:xmlContent>
    </foxml:datastreamVersion>
  </foxml:datastream>
</foxml:digitalObject>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_aanroFoxmlTemplate= 'respond'

## END CLASS DEFINITION

if not hasattr(aanroFoxmlTemplate, '_initCheetahAttributes'):
    templateAPIClass = getattr(aanroFoxmlTemplate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(aanroFoxmlTemplate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=aanroFoxmlTemplate()).run()


