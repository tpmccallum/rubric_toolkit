#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1206401848.7574961
__CHEETAH_genTimestamp__ = 'Tue Mar 25 09:37:28 2008'
__CHEETAH_src__ = 'aanroFoxmlTemplate_research.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Mar 18 16:58:17 2008'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class aanroFoxmlTemplate_research(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<?xml version="1.0" encoding="UTF-8"?>
<foxml:digitalObject xmlns:foxml="info:fedora/fedora-system:def/foxml#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" PID="''')
        _v = VFFSL(SL,"pid",True) # '$pid' on line 2, col 132
        if _v is not None: write(_filter(_v, rawExpr='$pid')) # from line 2, col 132.
        write('''" 
xsi:schemaLocation="http://www.fedora.info/definitions/1/0/foxml1-0.xsd">
  <foxml:objectProperties>
    <foxml:property NAME="http://www.w3.org/1999/02/22-rdf-syntax-ns#type" VALUE="FedoraObject"></foxml:property>
    <foxml:property NAME="info:fedora/fedora-system:def/model#state" VALUE="A"></foxml:property>
    <foxml:property NAME="info:fedora/fedora-system:def/model#label" VALUE="''')
        _v = VFFSL(SL,"title",True) # '$title' on line 7, col 77
        if _v is not None: write(_filter(_v, rawExpr='$title')) # from line 7, col 77.
        write('''"></foxml:property>
    <foxml:property NAME="info:fedora/fedora-system:def/model#contentModel" VALUE="Fez"></foxml:property>
  </foxml:objectProperties>
  <foxml:datastream CONTROL_GROUP="X" ID="DC" STATE="A">
    <foxml:datastreamVersion ID="DC.0" LABEL="Dublin Core" MIMETYPE="text/xml">
      <foxml:xmlContent>
<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
                        xmlns:dc="http://purl.org/dc/elements/1.1/">
                        
<dc:type>''')
        _v = VFFSL(SL,"doctype",True) # '$doctype' on line 16, col 10
        if _v is not None: write(_filter(_v, rawExpr='$doctype')) # from line 16, col 10.
        write('''</dc:type>

''')
        #  Code date YYYY-MM according to OAI-PMH guidelines: http://www.openarchives.org/OAI/openarchivesprotocol.html 
        write('''<dc:date>''')
        _v = VFFSL(SL,"startdate",True) # '$startdate' on line 19, col 10
        if _v is not None: write(_filter(_v, rawExpr='$startdate')) # from line 19, col 10.
        write('''</dc:date>
<dc:title>''')
        _v = VFFSL(SL,"title",True) # '$title' on line 20, col 11
        if _v is not None: write(_filter(_v, rawExpr='$title')) # from line 20, col 11.
        write('''</dc:title>
  
''')
        for (author) in VFFSL(SL,"authors",True): # generated from line 22, col 1
            write('''
''')
            #  Enter only the personal names into dc:creator. A single xl cell can contain several author names along with other information .e.g. Ms I (Irma) de Bree Ph: (03) 96936603|idebree@ausingred.com.au|Australian Ingredient Centre|88 Maribyrnong Street Footscray Vic 3011|Dr M (Mary-Ann) Augustin Ph: (03) 97420186|maryann.augustin@foodscience.afisc.csiro.au|Food Science Australia|Ingredient Functionality|Sneydes Road Werribee Vic 3030|Dr P (Paul) Grieve Ph: (07) 34068556|grievep@dpi.qld.gov.au|Queensland Department of Primary Industries and Fisheries|Centre for Food Technology|19 Hercules Street Hamilton Qld 4007. -->
            write('''
<dc:creator>''')
            _v = VFFSL(SL,"researcher",True) # '$researcher' on line 26, col 13
            if _v is not None: write(_filter(_v, rawExpr='$researcher')) # from line 26, col 13.
            write('''</dc:creator>

''')
        write('''
<dc:description>''')
        _v = VFFSL(SL,"objectives",True) # '$objectives' on line 30, col 17
        if _v is not None: write(_filter(_v, rawExpr='$objectives')) # from line 30, col 17.
        write('''</dc:description>

''')
        for subject in VFFSL(SL,"subjects",True): # generated from line 32, col 1
            write('''
''')
            #  Keeping $subject here though the AANRO spreadsheet uses "keywords" as the term. AANRO "Keywords" are being mapped.
            write('''
<dc:subject>''')
            _v = VFFSL(SL,"subject",True) # '$subject' on line 36, col 13
            if _v is not None: write(_filter(_v, rawExpr='$subject')) # from line 36, col 13.
            write('''</dc:subject>

''')
        write('''</oai_dc:dc>
      </foxml:xmlContent>
      
    </foxml:datastreamVersion>
  </foxml:datastream>
  <foxml:datastream CONTROL_GROUP="X" ID="MODS" STATE="A">
    <foxml:datastreamVersion ID="MODS.0" LABEL="MODSXML Record" MIMETYPE="text/xml">
      <foxml:xmlContent>
      
''')
        #  Don't throw out modsCollection without checking http://www.loc.gov/standards/mods/v3/MARC21slim2MODS.xsl -->
        write('''
  <mods version="3.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.loc.gov/mods/v3" xsi:schemaLocation="http://www.loc.gov/mods/v3 http://www.loc.gov/standards/mods/v3/mods-3-2.xsd">  
  
\t<identifier type="local">''')
        _v = VFFSL(SL,"id",True) # '$id' on line 52, col 27
        if _v is not None: write(_filter(_v, rawExpr='$id')) # from line 52, col 27.
        write('''</identifier>
  
''')
        #  NonSort is for "The" "An" "A" when these words appear at beginning of title -->
        write('''    
    <titleInfo>
    \t  <nonSort></nonSort>
\t      <title>''')
        _v = VFFSL(SL,"title",True) # '$title' on line 58, col 15
        if _v is not None: write(_filter(_v, rawExpr='$title')) # from line 58, col 15.
        write('''</title>\t      
    </titleInfo>    
   
    <titleInfo displayLabel="Program:">
    \t  <nonSort></nonSort>
\t      <title>''')
        _v = VFFSL(SL,"program",True) # '$program' on line 63, col 15
        if _v is not None: write(_filter(_v, rawExpr='$program')) # from line 63, col 15.
        write('''</title>
\t      <subTitle displayLabel="Subprogram:">''')
        _v = VFFSL(SL,"subprogram",True) # '$subprogram' on line 64, col 45
        if _v is not None: write(_filter(_v, rawExpr='$subprogram')) # from line 64, col 45.
        write('''</subTitle>
    </titleInfo>    
        
''')
        for researcher in VFFSL(SL,"researchers",True): # generated from line 67, col 1
            write('''    
''')
            #  Should the family and given names not be separated? No given names are included -- only one initial.
            write('''
    <name type="personal">
            <namePart type="family">''')
            _v = VFFSL(SL,"researcher",True)['familyname'] # "$researcher['familyname']" on line 72, col 37
            if _v is not None: write(_filter(_v, rawExpr="$researcher['familyname']")) # from line 72, col 37.
            write('''</namePart>
            <namePart type="given">''')
            _v = VFFSL(SL,"researcher",True)['initials'] # "$researcher['initials']" on line 73, col 36
            if _v is not None: write(_filter(_v, rawExpr="$researcher['initials']")) # from line 73, col 36.
            write('''</namePart>
            <namePart type="termsOfAddress">''')
            _v = VFFSL(SL,"researcher",True)['title'] # "$researcher['title']" on line 74, col 45
            if _v is not None: write(_filter(_v, rawExpr="$researcher['title']")) # from line 74, col 45.
            write('''</namePart>
            <affiliation>''')
            _v = VFFSL(SL,"researcher",True)['affiliation'] # "$researcher['affiliation']" on line 75, col 26
            if _v is not None: write(_filter(_v, rawExpr="$researcher['affiliation']")) # from line 75, col 26.
            write('''</affiliation>
            <affiliation>''')
            _v = VFFSL(SL,"researcher",True)['address'] # "$researcher['address']" on line 76, col 26
            if _v is not None: write(_filter(_v, rawExpr="$researcher['address']")) # from line 76, col 26.
            write('''</affiliation>
            <role>
                <roleTerm authority="marcrelator" type="text">creator</roleTerm>
            </role>
    </name>
    
''')
        write('''    <typeOfResource>text</typeOfResource>
    <genre authority="AANRO">''')
        _v = VFFSL(SL,"doctype",True) # '$doctype' on line 84, col 30
        if _v is not None: write(_filter(_v, rawExpr='$doctype')) # from line 84, col 30.
        write('''</genre>
    
''')
        # Enter dates in YYYY-MM format    
        write('''    <originInfo>
      <dateOther encoding="iso8601" point="start">''')
        _v = VFFSL(SL,"startdate",True) # '$startdate' on line 88, col 51
        if _v is not None: write(_filter(_v, rawExpr='$startdate')) # from line 88, col 51.
        write('''</dateOther>
      <dateOther encoding="iso8601" point="end">''')
        _v = VFFSL(SL,"finishdate",True) # '$finishdate' on line 89, col 49
        if _v is not None: write(_filter(_v, rawExpr='$finishdate')) # from line 89, col 49.
        write('''</dateOther>
    </originInfo>        
          
''')
        for subject in VFFSL(SL,"subjects",True): # generated from line 92, col 5
            write('''    
''')
            # Keeping $subject here though the AANRO spreadsheet uses "keywords" as the term. AANRO "Keywords" are being mapped.
            write('''    
     <subject>
            <topic>''')
            _v = VFFSL(SL,"subject",True) # '$subject' on line 97, col 20
            if _v is not None: write(_filter(_v, rawExpr='$subject')) # from line 97, col 20.
            write('''</topic>
    </subject>
    
''')
        write('''    
''')
        # AANRO's locality to go to subject-geographic as follows
        write('''
    <subject>
\t\t<geographic>''')
        _v = VFFSL(SL,"locality",True) # '$locality' on line 105, col 15
        if _v is not None: write(_filter(_v, rawExpr='$locality')) # from line 105, col 15.
        write('''</geographic>
\t</subject>
    
''')
        for sponsor in VFFSL(SL,"sponsors",True): # generated from line 108, col 2
            write('''
\t<name type="corporate">
            <namePart>''')
            _v = VFFSL(SL,"sponsor",True) # '$sponsor' on line 111, col 23
            if _v is not None: write(_filter(_v, rawExpr='$sponsor')) # from line 111, col 23.
            write('''</namePart>
            <role>
                <roleTerm authority="marcrelator" >Sponsor</roleTerm>
            </role>
    </name>
''')
        write('''    <name type="corporate">
            <namePart>''')
        _v = VFFSL(SL,"collaboration",True) # '$collaboration' on line 118, col 23
        if _v is not None: write(_filter(_v, rawExpr='$collaboration')) # from line 118, col 23.
        write('''</namePart>
            <role>
                <roleTerm authority="marcrelator">Collaborator</roleTerm>
            </role>
    </name>
    
    <note displayLabel="Objectives">''')
        _v = VFFSL(SL,"objectives",True) # '$objectives' on line 124, col 37
        if _v is not None: write(_filter(_v, rawExpr='$objectives')) # from line 124, col 37.
        write('''</note>
    <note displayLabel="Background">''')
        _v = VFFSL(SL,"background",True) # '$background' on line 125, col 37
        if _v is not None: write(_filter(_v, rawExpr='$background')) # from line 125, col 37.
        write('''</note>
    <note displayLabel="Methodology">''')
        _v = VFFSL(SL,"methodology",True) # '$methodology' on line 126, col 38
        if _v is not None: write(_filter(_v, rawExpr='$methodology')) # from line 126, col 38.
        write('''</note>
    <note displayLabel="Progress">''')
        _v = VFFSL(SL,"progress",True) # '$progress' on line 127, col 35
        if _v is not None: write(_filter(_v, rawExpr='$progress')) # from line 127, col 35.
        write('''</note>
    <note displayLabel="Implication">''')
        _v = VFFSL(SL,"implication",True) # '$implication' on line 128, col 38
        if _v is not None: write(_filter(_v, rawExpr='$implication')) # from line 128, col 38.
        write('''</note>
    
    
    <location>
\t\t<url></url>
\t</location>
   
  </mods>

   
    </foxml:xmlContent>
    </foxml:datastreamVersion>
  </foxml:datastream>
</foxml:digitalObject>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_aanroFoxmlTemplate_research= 'respond'

## END CLASS DEFINITION

if not hasattr(aanroFoxmlTemplate_research, '_initCheetahAttributes'):
    templateAPIClass = getattr(aanroFoxmlTemplate_research, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(aanroFoxmlTemplate_research)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=aanroFoxmlTemplate_research()).run()


